#!/usr/bin/env node

process.title = 'intern';

var fs = require('fs'),
	cli = require('../lib/cli'),
	relative = require('require-relative'),
	semver = require('semver'),
	path = require('path'),
	package = require('../package.json'),
	options = cli.init(),
	intern,
	options,
	config,
	runner;

function packageString(package) {
	return package.name + ' v' + package.version;
}

// make sure we have a local intern
intern = cli.findIntern();
if (!intern) {
	cli.die('Missing local Intern', 1);
}
if (semver.lt(intern.package.version, '1.6.0')) {
	cli.die('Intern 1.6.0 or above is required', 1);
}

if (options.version) {
	cli.die(packageString(package) + '\n' + packageString(intern.package));
}
if (options.help) {
	cli.die(cli.help());
}

if (!options.no_color) {
	cli.colorizeConsole({ debug: options.verbose });
}

if (options.verbose) {
	console.log('Intern path:  ', intern.path);
	console.log('Intern name:  ', intern.package.name);
	console.log('Options:\n', options);
}

// esure a config file was specified
config = options.config;
if (!config) {
	console.warn('Config file is required');
	cli.die(cli.help(), 1);
}

// work from the current project root
if (options.projectRoot) {
	process.chdir(options.projectRoot);
}

// make sure the test config file exits
var configFile = config;
if (configFile.slice(-3) !== '.js') {
	configFile += '.js';
}
if (!fs.existsSync(configFile)) {
	cli.die('Config file "' + configFile + '" does not exist');
}

// configure the Dojo loader (normally handled by Intern's runner and client)
var internConfig = global.__internConfig = {
	baseUrl: process.cwd(),
	packages: [
		{ name: 'intern', location: intern.path },
		{ name: 'intern-cli', location: path.join(__dirname, '..') }
	],
	map: {
		intern: {
			dojo: 'intern/node_modules/dojo',
			chai: 'intern/node_modules/chai/chai',
		},
		'*': {
			'intern/dojo': 'intern/node_modules/dojo'
		}
	}
};

// setup a config object to transfer setup information to the runner module
global.__cliConfig = {
	options: options,
	config: config,
	intern: intern,
	runType: (options.webdriver || options.sauce || intern.isGeezer) ? 'runner' : 'client'
};

// if we're using geezer, update the config for the standard Dojo loader used by geezer
if (intern.isGeezer) {
	global.dojoConfig = internConfig;
	internConfig.async = true;
	internConfig.tlmSiblingOfDojo = false;
	internConfig.useDeferredInstrumentation = false;
	internConfig.deps = [ 'intern-cli/lib/runner' ];
}

// clear and reset process.argv[2:] -- the only option we want is the config, everything else will be modified in the
// config object directly
process.argv = process.argv.slice(0, 2);
process.argv.push('config=' + config);

// load the Dojo loader
var req = relative('dojo/dojo', intern.path);

// if this is not geezer, load the runner; if it is geezer, the runner was automatically loaded
if (!intern.isGeezer) {
	req(internConfig, [ 'intern-cli/lib/runner' ]);
}

// vim:filetype=javascript
